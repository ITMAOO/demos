A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.

For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps. The number 32 has binary representation 100000 and has no binary gaps.

Write a function:

class Solution { public int solution(int N); }

that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..2,147,483,647].

方案：
方案1： 利用整数除以2余数的特性获取对应二进制位0或1的数值，余数为末位的二进制符号0或1，除数为下一位计算的被除数。
注意1：起始为0和末尾为0的情况
方案二，Integer自带转为BinaryString方法获取String，依据String循环每一个下标数0最长
方案三：Integer自带转为BinaryString方法获取String，把1用#1#代替，String用1分割，前缀和后缀都含#计算长度。
方案四：位运算, >>>不带符号右移动，&与1取与得0或1值